#!/bin/bash

# USAGE: run with no arguments to validate the image with some basic tests.

THIS_DIR="$(cd "$(dirname "$BASH_SOURCE")"; pwd)"
BASE_DIR="$(dirname $THIS_DIR)"
BASH_INCLUDE="$BASE_DIR/lib/bash_include"
BIN="$BASE_DIR/lib/bin"

. $BASH_INCLUDE/config.bash
. $BASH_INCLUDE/bash_utils.bash
. $BASH_INCLUDE/dockerhub.bash

function main {
    test_serving_a_page || exit_with_error_message "Something went wrong with the page-serving test of the image."
    test_for_unpublished_changes || exit 1
    exit 0
}

function test_serving_a_page {
    $BIN/build_test_image || exit_with_error_message "FAILED to build test image"

    TEST_CONTAINER_NAME="${TEST_IMAGE_NAME}_container"
    docker stop $TEST_CONTAINER_NAME 2>/dev/null
    docker run --rm -d \
        --name "${TEST_CONTAINER_NAME}" \
        $TEST_IMAGE_FULLNAME \
    || exit_with_error_message "FAILED to run test image $MAIN_IMAGE_FULLNAME:candidate $(grep FROM Dockerfile|head -n 1)"

    seconds_to_wait_for_boot="5"
    echo sleeping for $seconds_to_wait_for_boot seconds to allow the test container to come up.... at $(date);sleep $seconds_to_wait_for_boot;echo done sleeping at $(date);echo "--------------------"

    TEST_CONTAINER_IPADDR="$(docker inspect -f "{{.NetworkSettings.IPAddress }}" $TEST_CONTAINER_NAME)"

    curl_output="$(curl -v --connect-timeout 2 --retry 6 --retry-delay 3 "http://$TEST_CONTAINER_IPADDR/index.nginx-debian.html" 2>&1 )"; curl_exit_code="$?"

    return_code=0
    docker stop $TEST_CONTAINER_NAME || { echo "ERROR: could not stop container \"$TEST_CONTAINER_NAME\"! (at $BASH_SOURCE:$LINENO)" >&2; return_code=1; }
    $BIN/delete_test_image || exit_with_error_message "FAILED to delete test image"

    if [ "$curl_exit_code" -eq 0 ];then
        echo "curl succeeded!" >&2
    else
        echo "$curl_output"| tail -n 3 >&2
        exit_with_error_message "FAILED to curl page from test container! curl returned $curl_exit_code. (at $BASH_SOURCE:$LINENO)"
    fi

    echo "HOORAY! The test container was able to serve a page."
    return $return_code
}

function test_for_unpublished_changes {
    docker_force_pull "$MAIN_IMAGE_FULLNAME:latest" || exit_with_error_message "Could not pull fresh $MAIN_IMAGE_FULLNAME:latest from network"
    latest_image_hash="$(get_docker_hash_for_image ${MAIN_IMAGE_FULLNAME}:latest)" || exit 1
    candidate_image_hash="$(get_docker_hash_for_image ${MAIN_IMAGE_FULLNAME}:candidate)" || exit 1
    if [ "$latest_image_hash" != "$candidate_image_hash" ]; then
        echo "We have built an image with hash \"$candidate_image_hash\" as ${MAIN_IMAGE_FULLNAME}:latest, whereas the official ${MAIN_IMAGE_FULLNAME}:latest has a hash of \"$latest_image_hash\"." >&2
        assert_main_version_unused
    fi

}

function get_docker_hash_for_image {
    docker history $1 | head -n 2 | tail -n 1 | awk '{print $1}'
}

main "$@"
