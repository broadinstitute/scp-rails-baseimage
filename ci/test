#!/bin/bash

# USAGE: run with no arguments to validate the image with some basic tests.

THIS_DIR="$(cd "$(dirname "$BASH_SOURCE")"; pwd)"
BASE_DIR="$(dirname $THIS_DIR)"
BASH_INCLUDE="$BASE_DIR/lib/bash_include"
BIN="$BASE_DIR/lib/bin"

. $BASH_INCLUDE/config.bash
. $BASH_INCLUDE/bash_utils.bash
. $BASH_INCLUDE/dockerhub.bash

function main {
    test_serving_a_page

    exit 0
}

function test_serving_a_page {
    $BIN/build_test_image || { echo "ERROR: $(basename $0): FAILED to build test image" >&2; exit 1; }

    TEST_CONTAINER_NAME="${TEST_IMAGE_NAME}_testing_container"
    docker stop $TEST_CONTAINER_NAME 2>/dev/null
    echo DEBUG: trying docker run...
    docker run --rm -d \
        --name "${TEST_CONTAINER_NAME}" \
        -p 9980:80 \
        $TEST_IMAGE_FULLNAME \
    || exit_with_error_message "FAILED to run test image $MAIN_IMAGE_FULLNAME:candidate $(grep FROM Dockerfile|head -n 1)  (at $BASH_SOURCE:$LINENO)"

    echo sleeping for 30 seconds to allow the test containter to come up.... at $(date);sleep 30;echo done sleeping at $(date);echo "--------------------" & # TODO TODO: DELETE
    curl -v 'http://localhost:9980/index.nginx-debian.html' || { echo "ERROR ($?): FAILED to curl page from test container! (at $BASH_SOURCE:$LINENO)" >&2; exit 1; } #TODO: TEST (based on /var/) # TODO: container name, not localhost ;\
    echo DEBUG: it seems that curl worked.

    docker stop $TEST_CONTAINER_NAME || { echo "ERROR: could not stop container \"$TEST_CONTAINER_NAME\"! (at $BASH_SOURCE:$LINENO)" >&2; exit 1; }

}

function test_for_unpublished_changes {
    docker_force_pull $MAIN_IMAGE_FULLNAME:latest || exit_with_error_message "could not pull fresh $MAIN_IMAGE_FULLNAME:latest from network"
    latest_image_hash="$(get_docker_hash_for_image ${MAIN_IMAGE_FULLNAME}:latest)" || exit 1
    candidate_image_hash="$(get_docker_hash_for_image ${MAIN_IMAGE_FULLNAME}:candidate)" || exit 1
    if [ "$latest_image_hash" != "$candidate_image_hash" ]; then
        assert_main_version_unused
    fi

}

function docker_force_pull {
    local IMAGE="$1"
    docker tag $IMAGE temp
    docker rmi $IMAGE
    docker pull $IMAGE
    docker rmi temp
}

function get_docker_hash_for_image {
    docker history $1 | head -n 2 | tail -n 1 | awk '{print $1}'
}

main "$@"
