#!/bin/bash

THIS_DIR="$(cd "$(dirname "$0")"; pwd)"
BASE_DIR="$(dirname $THIS_DIR)"

. $BASE_DIR/lib/bash_include/config.bash

# TODO: (?): docker login
# TODO: should this fail if you try to run it locally instead of from jenkins? at least if you don't pass -f/--force? maybe we should bake username/hostname into the image for traceability instead?
# TODO: publish version 1.0.

function main {
    version=$(cat $BASE_DIR/version.txt)

    if docker_image_has_been_published "hub.docker.com" "$MAIN_IMAGE_FULLNAME" "$version" ; then
        echo "ERROR: $(basename $0): version $version has already been published. Please edit version.txt according to semver and try again." >&2
        exit 1
    else
        docker tag "$MAIN_IMAGE_FULLNAME:latest" "$MAIN_IMAGE_FULLNAME:$version" || { echo "ERROR: $(basename $0): failed to tag $MAIN_IMAGE_NAME with $version ">&2; exit 1; }
        docker image ls | grep "\\b$MAIN_IMAGE_FULLNAME\\b" | grep "\\b$version\\b" || exit 1 #confirm taggging worked
        docker push "$MAIN_IMAGE_FULLNAME:latest" || { echo "ERROR: $(basename $0): failed to push $MAIN_IMAGE_NAME:latest ">&2; exit 1; }
        docker push "$MAIN_IMAGE_FULLNAME:$version" || { echo "ERROR: $(basename $0): failed to push $MAIN_IMAGE_NAME:$version ">&2; exit 1; }

        # TODO: test git[hub] release tag from jenkins job, which might not work the same:
        # TODO: this is also problematic, because if not run from jenkins, what's to say there aren't local changes?
        echo DEBUG: running: git tag $version
        git tag "$version" || exit 1
        echo DEBUG: running: git push origin $version
        git push origin "$version" || exit 1

    fi
}

# making sure publish fails if version.txt has not been updated to avoid re-using the version tag:
function docker_image_has_been_published {

    local REGISTRY="$1"
    local IMAGE_SCOPED_NAME="$2"
    local TAG="$3"

    if docker_image_has_been_published_unsafe "$REGISTRY" "$IMAGE_SCOPED_NAME" "latest"; then
        docker_image_has_been_published_unsafe "$REGISTRY" "$IMAGE_SCOPED_NAME" "$TAG"
    else
        echo "ERROR: $(basename $0): cannot confirm what has previously published."
        exit 1
    fi

}

function docker_image_has_been_published_unsafe {
    local REGISTRY="$1"
    local IMAGE_SCOPED_NAME="$2"
    local TAG="$3"

    TAG_TEST_URL="https://$REGISTRY/v2/repositories/$IMAGE_SCOPED_NAME/tags/$TAG/"
    HTTP_CODE="$(curl -X "HEAD" -L -s -w "%{http_code}" "$TAG_TEST_URL" -m 2 )"
    [ "200" == "$HTTP_CODE" ]
}

main "$@"
