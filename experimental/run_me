#!/bin/bash

THIS_DIR="$(cd "$(dirname "$0")"; pwd)"
IMAGE_REPOS_DIR="$THIS_DIR/image_repos"

function main {
    $THIS_DIR/build_image_builder_image || { echo "ERROR: could not build image_builder_image" >&2; exit 1; }
    echo "finished building image_builder_image"

    cd $THIS_DIR
    mkdir -p $IMAGE_REPOS_DIR

    for GITHUB_REPO_NAME in \
        phusion/baseimage-docker \
        phusion/passenger-docker \
        broadinstitute/kdux-rails-baseimage
    do
        rebuild_docker_image_from_repo $GITHUB_REPO_NAME
    done

    # TODO: should any of this bash code be changed to another language (maybe get Bistline's opinion)
    # TODO: set up a jenkins job. requires decisions about version numbering
    # TODO:     - TODO: make sure publish fails (from job or otherwise) if version.txt has not been updated.
    # TODO: capture version numbers of images, git state, etc. to bake into image for traceability?
    # TODO:     - an idea: figure out the commit hash and/or version number of source images (well, their source), and explicitly use/record them
    # TODO:     - how to tag docker images with git commit: https://blog.scottlowe.org/2017/11/08/how-tag-docker-images-git-commit-information/
    # TODO:         - on git labels & best practices: https://adilsoncarvalho.com/use-labels-on-your-docker-images-3abe4477e9f5
    # TODO:     - I also think it might be good to park a full report somewhere in /etc/ , sort of like how /etc/os-release is there and contains basic system information

}

function rebuild_docker_image_from_repo {
    echo
    echo "rebuilding docker image from repo: $GITHUB_REPO_NAME"
    echo "----------------------------------------------------"

    GITHUB_REPO_NAME="$1"

    CLONE_REPO="git@github.com:$GITHUB_REPO_NAME.git"

    CLONE_DIR_NAME="$(echo $GITHUB_REPO_NAME | sed 's/\//_/' )"
    CLONE_DIR="$IMAGE_REPOS_DIR/$CLONE_DIR_NAME"

    if ! [ -d  $CLONE_DIR ]; then
        git clone $CLONE_REPO $CLONE_DIR || exit 1
    fi
    pushd $CLONE_DIR || exit 1
    git checkout -- .
    git pull || exit 1
    echo "$CLONE_DIR up to date!"

    REBUILD_SCRIPT="$THIS_DIR/rebuild_image_for_$CLONE_DIR_NAME"

    $REBUILD_SCRIPT || { echo "ERROR: $REBUILD_SCRIPT failed" >&2; exit 1; }
    echo "$REBUILD_SCRIPT finished."

    popd
}

main "$@"
