#!/bin/bash

THIS_DIR="$(cd "$(dirname "$BASH_SOURCE")"; pwd)"
BASE_DIR="$(dirname $(dirname $THIS_DIR))"

. $BASE_DIR/lib/bash_include/config.bash

SOURCE_DIR="$BASE_DIR"
cd $SOURCE_DIR || exit 1

EXPECTED_FROM_IMAGE_PATTERN="$DOCKER_NAMESPACE/$PHUSION_PASSENGER_IMAGE_NAME.*:$PHUSION_PASSENGER_IMAGE_VERSION"
grep "^FROM[[:space:]]*$EXPECTED_FROM_IMAGE_PATTERN[[:space:]]*\$" "$BASE_DIR/Dockerfile" || exit_with_error_message "$BASE_DIR/Dockerfile is not building from an image matching \"$EXPECTED_FROM_IMAGE_PATTERN\"."

ORIGIN_STORY="This version of singlecellportal/rails-baseimage was built using $BASE_IMAGE as a base image, and rebuilding stlightly modified versions of the following images from source on top of that, before using it's own dockerfile: $PHUSION_BASE_IMAGE_REPO version $PHUSION_BASE_IMAGE_VERSION, $PHUSION_PASSENGER_IMAGE_REPO version $PHUSION_PASSENGER_IMAGE_VERSION."
docker build -t "$MAIN_IMAGE_FULLNAME:candidate" --build-arg VCS_REF=$(git rev-parse HEAD) --build-arg ORIGIN_STORY="$ORIGIN_STORY" . || exit 1 # Don't tag with actual version numbers until the publish script, so you can build, attempt publish, change version.txt when it fails, and re-attempt publish without having to build again
docker image ls | grep "\\b$MAIN_IMAGE_FULLNAME\\b" | grep "\\bcandidate\\b" || exit 1

echo;echo "Showing labels for \"$MAIN_IMAGE_FULLNAME:candidate\":"
docker inspect --format '{{range $key, $val := .Config.Labels}}{{$key}}="{{$val}}"{{println}}{{end}}' "$MAIN_IMAGE_FULLNAME:candidate"
