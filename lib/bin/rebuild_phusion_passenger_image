#!/bin/bash

THIS_DIR="$(cd "$(dirname "$BASH_SOURCE")"; pwd)"
BASE_DIR="$(dirname $(dirname $THIS_DIR))"
echo
echo '########################################'
echo "## running \"$(basename "$BASH_SOURCE")\""
echo '########################################'

. $BASE_DIR/lib/bash_include/config.bash
. $BASE_DIR/lib/bash_include/github.bash
. $BASE_DIR/lib/bash_include/bash_utils.bash

PHUSION_PASSENGER_IMAGE_NAME="$(new_image_name_from_repo $PHUSION_PASSENGER_IMAGE_REPO)"
IMAGE_FULLNAME="$DOCKER_NAMESPACE/$PHUSION_PASSENGER_IMAGE_NAME"

github_checkout "$PHUSION_PASSENGER_IMAGE_REPO" "$PHUSION_PASSENGER_IMAGE_SOURCE_DIR" "$PHUSION_PASSENGER_IMAGE_REPO_RELEASE_TAG" || exit 1

cd "$PHUSION_PASSENGER_IMAGE_SOURCE_DIR" || exit 1

export PATH="$BASE_DIR/lib/docker_shim:$PATH" # use a docker shim to filter out arguments we don't like

DOCKER_FILE="./image/Dockerfile"
sed -i "s~^FROM[[:space:]].\{1,\}$~FROM $DOCKER_NAMESPACE/phusion_baseimage:$PHUSION_BASE_IMAGE_VERSION~" $DOCKER_FILE

MAKE_TARGET=build_full
MAKE_OUTPUT="$(make $MAKE_TARGET NAME="$IMAGE_FULLNAME")" || exit_with_error_message "make build FAILED" # build
echo "$MAKE_OUTPUT"
TAG_REPORT="$(docker images | grep "$IMAGE_FULLNAME.*$PHUSION_PASSENGER_IMAGE_VERSION")" || exit_with_error_message "Image not tagged as expected"

echo $TAG_REPORT > "$PHUSION_PASSENGER_IMAGE_SOURCE_STATE_REPORT"
report_local_repository_state "$PHUSION_PASSENGER_IMAGE_SOURCE_DIR" >> "$PHUSION_PASSENGER_IMAGE_SOURCE_STATE_REPORT"
